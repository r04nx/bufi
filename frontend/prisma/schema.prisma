generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  businessName  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  transactions  Transaction[]
  invoices      Invoice[]
  revenues      Revenue[]
  documents     Document[]
  investors     Investor[]
  taxRecords    TaxRecord[]
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessAge     Int?
  industrySector  String?
  employeeCount   Int?
  annualRevenue   Float?
  businessType    String?
  taxIdentifier   String?
  address         String?
  phone           String?
  website         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  date        DateTime
  amount      Float
  type        TransactionType
  category    String
  description String
  status      TransactionStatus
  reference   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Revenue {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  source      String
  date        DateTime
  description String?
  target      Float?
  growth      Float?
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  status      InvoiceStatus
  dueDate     DateTime
  clientName  String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  title       String
  type        String
  url         String
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Investor {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  type        String
  stake       Float
  joinDate    DateTime
  activities  InvestorActivity[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model InvestorActivity {
  id          String    @id @default(cuid())
  investorId  String
  investor    Investor  @relation(fields: [investorId], references: [id])
  type        String
  description String
  date        DateTime
  amount      Float?
  participants String[]
  documents   String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model TaxRecord {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  year            Int
  quarter         Int?
  type            String
  amount          Float
  status          String
  dueDate         DateTime?
  filingDate      DateTime?
  documents       String[]
  planningNotes   String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  COMPLETED
  PENDING
  FAILED
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
  CANCELLED
} 