generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  businessName  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  transactions  Transaction[]
  invoices      Invoice[]
  revenues      Revenue[]
  documents     Document[]
  investors     Investor[]
  taxRecords    TaxRecord[]
  reports       Report[]
  subscription  Subscription?
  aiCreditsUsed Int       @default(0)
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessAge     Int?
  industrySector  String?
  businessSize    String?
  businessType    String?
  employeeCount   Int?
  annualRevenue   Float?
  taxIdentifier   String?
  address         String?
  phone           String?
  website         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  date        DateTime
  amount      Float
  type        String
  category    String
  description String
  status      String
  reference   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Revenue {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  source      String
  date        DateTime
  description String?
  target      Float?
  growth      Float?
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  status      String
  dueDate     DateTime
  clientName  String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  title       String
  type        String
  url         String
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Investor {
  id             String       @id @default(cuid())
  name           String
  type           String
  representative String
  email          String
  phone          String?
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  investments    Investment[]
  activities     InvestorActivity[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Investment {
  id         String   @id @default(cuid())
  amount     Float
  equity     Float
  round      String
  date       DateTime
  investorId String
  investor   Investor @relation(fields: [investorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model InvestorActivity {
  id            String   @id @default(cuid())
  type          String
  description   String
  date          DateTime
  investorId    String
  investor      Investor @relation(fields: [investorId], references: [id])
  amount        Float?
  participants  String?  // Will store JSON array as string
  documents     String?  // Will store JSON array as string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model TaxRecord {
  id             String    @id @default(cuid())
  year           Int
  quarter        Int?
  type           String
  amount         Float
  status         String
  filingDate     DateTime?
  documents      String?   // Will store JSON array as string
  planningNotes  String?
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Report {
  id        String   @id @default(cuid())
  title     String
  type      String
  format    String
  dateRange String   // Will store JSON object as string
  status    String   @default("pending")
  url       String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  planId          String
  plan            SubscriptionPlan @relation(fields: [planId], references: [id])
  planType        String   // Instead of PlanType enum
  billingPeriod   String   // Instead of BillingPeriod enum
  startDate       DateTime
  endDate         DateTime?
  status          String
  stripeCustomerId String?
  stripeSubscriptionId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([planId])
}

model SubscriptionPlan {
  id              String   @id @default(cuid())
  name            String
  description     String
  price           Float
  features        String   // Store as JSON string
  limits          String   // Store as JSON string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  subscriptions   Subscription[]
} 