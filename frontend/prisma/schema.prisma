generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  businessName  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  transactions  Transaction[]
  invoices      Invoice[]
  customers     Customer[]
  subscription  Subscription?
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  businessAge     Int?
  industrySector  String?
  businessSize    String?
  gstin           String?  @unique
  pan             String?  @unique
  cibilScore      Int?
  employeeCount   Int?
  annualRevenue   Float?
  businessAddress String?
  phoneNumber     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Customer {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  name        String
  email       String?
  phone       String?
  address     String?
  gstin       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invoices    Invoice[]
}

model Transaction {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  amount      Float
  type        String    // "CREDIT" or "DEBIT"
  category    String?
  description String?
  date        DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invoice {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  amount      Float
  status      String    // "PAID", "PENDING", "OVERDUE"
  dueDate     DateTime
  items       InvoiceItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id])
  description String
  quantity    Int
  unitPrice   Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  plan      String   // "BASIC", "PRO", "ENTERPRISE"
  status    String   // "ACTIVE", "CANCELLED", "EXPIRED"
  startDate DateTime @default(now())
  endDate   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 